define(['dart_sdk', 'packages/speech_to_text_platform_interface/method_channel_speech_to_text.dart', 'packages/clock/src/stopwatch.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/speech_to_text/speech_recognition_result.dart', 'packages/speech_to_text/speech_recognition_error.dart'], (function load__packages__speech_to_text__speech_to_text_dart(dart_sdk, packages__speech_to_text_platform_interface__method_channel_speech_to_text$46dart, packages__clock__src__stopwatch$46dart, packages__flutter__src__services__system_channels$46dart, packages__speech_to_text__speech_recognition_result$46dart, packages__speech_to_text__speech_recognition_error$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const math = dart_sdk.math;
  const convert = dart_sdk.convert;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const speech_to_text_platform_interface = packages__speech_to_text_platform_interface__method_channel_speech_to_text$46dart.speech_to_text_platform_interface;
  const $default = packages__clock__src__stopwatch$46dart.src__default;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const speech_recognition_result = packages__speech_to_text__speech_recognition_result$46dart.speech_recognition_result;
  const speech_recognition_error = packages__speech_to_text__speech_recognition_error$46dart.speech_recognition_error;
  var speech_to_text = Object.create(dart.library);
  var $map = dartx.map;
  var $where = dartx.where;
  var $toList = dartx.toList;
  var $cast = dartx.cast;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $compareTo = dartx.compareTo;
  var $sort = dartx.sort;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    ListenModeL: () => (T.ListenModeL = dart.constFn(dart.legacy(speech_to_text.ListenMode)))(),
    FutureOfbool: () => (T.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),
    LocaleNameN: () => (T.LocaleNameN = dart.constFn(dart.nullable(speech_to_text.LocaleName)))(),
    dynamicToLocaleNameN: () => (T.dynamicToLocaleNameN = dart.constFn(dart.fnType(T.LocaleNameN(), [dart.dynamic])))(),
    LocaleNameNTobool: () => (T.LocaleNameNTobool = dart.constFn(dart.fnType(core.bool, [T.LocaleNameN()])))(),
    LocaleNameAndLocaleNameToint: () => (T.LocaleNameAndLocaleNameToint = dart.constFn(dart.fnType(core.int, [speech_to_text.LocaleName, speech_to_text.LocaleName])))(),
    ListOfLocaleName: () => (T.ListOfLocaleName = dart.constFn(core.List$(speech_to_text.LocaleName)))(),
    FutureOfLocaleNameN: () => (T.FutureOfLocaleNameN = dart.constFn(async.Future$(T.LocaleNameN())))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: speech_to_text.ListenMode.prototype,
        [_name$]: "ListenMode.deviceDefault",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: speech_to_text.ListenMode.prototype,
        [_name$]: "ListenMode.dictation",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: speech_to_text.ListenMode.prototype,
        [_name$]: "ListenMode.search",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: speech_to_text.ListenMode.prototype,
        [_name$]: "ListenMode.confirmation",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3], T.ListenModeL());
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 2000000
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 50000
      });
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/speech_to_text-4.2.2/lib/speech_to_text.dart",
    "package:speech_to_text/speech_to_text.dart"
  ];
  var _name$ = dart.privateName(speech_to_text, "_name");
  speech_to_text.ListenMode = class ListenMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (speech_to_text.ListenMode.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 12, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 12, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = speech_to_text.ListenMode.prototype;
  dart.addTypeTests(speech_to_text.ListenMode);
  dart.addTypeCaches(speech_to_text.ListenMode);
  dart.setLibraryUri(speech_to_text.ListenMode, I[1]);
  dart.setFieldSignature(speech_to_text.ListenMode, () => ({
    __proto__: dart.getFields(speech_to_text.ListenMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(speech_to_text.ListenMode, ['toString']);
  speech_to_text.ListenMode.deviceDefault = C[0] || CT.C0;
  speech_to_text.ListenMode.dictation = C[1] || CT.C1;
  speech_to_text.ListenMode.search = C[2] || CT.C2;
  speech_to_text.ListenMode.confirmation = C[3] || CT.C3;
  speech_to_text.ListenMode.values = C[4] || CT.C4;
  var localeId$ = dart.privateName(speech_to_text, "LocaleName.localeId");
  var name$ = dart.privateName(speech_to_text, "LocaleName.name");
  speech_to_text.LocaleName = class LocaleName extends core.Object {
    get localeId() {
      return this[localeId$];
    }
    set localeId(value) {
      super.localeId = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
  };
  (speech_to_text.LocaleName.new = function(localeId, name) {
    if (localeId == null) dart.nullFailed(I[0], 25, 19, "localeId");
    if (name == null) dart.nullFailed(I[0], 25, 34, "name");
    this[localeId$] = localeId;
    this[name$] = name;
    ;
  }).prototype = speech_to_text.LocaleName.prototype;
  dart.addTypeTests(speech_to_text.LocaleName);
  dart.addTypeCaches(speech_to_text.LocaleName);
  dart.setLibraryUri(speech_to_text.LocaleName, I[1]);
  dart.setFieldSignature(speech_to_text.LocaleName, () => ({
    __proto__: dart.getFields(speech_to_text.LocaleName.__proto__),
    localeId: dart.finalFieldType(core.String),
    name: dart.finalFieldType(core.String)
  }));
  var errorListener = dart.privateName(speech_to_text, "SpeechToText.errorListener");
  var statusListener = dart.privateName(speech_to_text, "SpeechToText.statusListener");
  var _initWorked = dart.privateName(speech_to_text, "_initWorked");
  var _recognized = dart.privateName(speech_to_text, "_recognized");
  var _listening = dart.privateName(speech_to_text, "_listening");
  var _cancelOnError = dart.privateName(speech_to_text, "_cancelOnError");
  var _partialResults = dart.privateName(speech_to_text, "_partialResults");
  var _notifiedFinal = dart.privateName(speech_to_text, "_notifiedFinal");
  var _listenStartedAt = dart.privateName(speech_to_text, "_listenStartedAt");
  var _lastSpeechEventAt = dart.privateName(speech_to_text, "_lastSpeechEventAt");
  var _pauseFor = dart.privateName(speech_to_text, "_pauseFor");
  var _listenFor = dart.privateName(speech_to_text, "_listenFor");
  var _finalTimeout = dart.privateName(speech_to_text, "_finalTimeout");
  var _userEnded = dart.privateName(speech_to_text, "_userEnded");
  var _lastRecognized = dart.privateName(speech_to_text, "_lastRecognized");
  var _lastStatus = dart.privateName(speech_to_text, "_lastStatus");
  var _lastSoundLevel = dart.privateName(speech_to_text, "_lastSoundLevel");
  var _listenTimer = dart.privateName(speech_to_text, "_listenTimer");
  var _notifyFinalTimer = dart.privateName(speech_to_text, "_notifyFinalTimer");
  var _systemLocale = dart.privateName(speech_to_text, "_systemLocale");
  var _lastError = dart.privateName(speech_to_text, "_lastError");
  var _lastSpeechResult = dart.privateName(speech_to_text, "_lastSpeechResult");
  var _resultListener = dart.privateName(speech_to_text, "_resultListener");
  var _soundLevelChange = dart.privateName(speech_to_text, "_soundLevelChange");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _onTextRecognition = dart.privateName(speech_to_text, "_onTextRecognition");
  var _onNotifyError = dart.privateName(speech_to_text, "_onNotifyError");
  var _onNotifyStatus = dart.privateName(speech_to_text, "_onNotifyStatus");
  var _onSoundLevelChange = dart.privateName(speech_to_text, "_onSoundLevelChange");
  var _stop = dart.privateName(speech_to_text, "_stop");
  var _shutdownListener = dart.privateName(speech_to_text, "_shutdownListener");
  var _onFinalTimeout = dart.privateName(speech_to_text, "_onFinalTimeout");
  var _cancel = dart.privateName(speech_to_text, "_cancel");
  var _setupListenAndPause = dart.privateName(speech_to_text, "_setupListenAndPause");
  var _elapsedSinceSpeechEvent = dart.privateName(speech_to_text, "_elapsedSinceSpeechEvent");
  var _elapsedListenMillis = dart.privateName(speech_to_text, "_elapsedListenMillis");
  var _stopOnPauseOrListen = dart.privateName(speech_to_text, "_stopOnPauseOrListen");
  var _notifyResults = dart.privateName(speech_to_text, "_notifyResults");
  speech_to_text.SpeechToText = class SpeechToText extends core.Object {
    get errorListener() {
      return this[errorListener];
    }
    set errorListener(value) {
      this[errorListener] = value;
    }
    get statusListener() {
      return this[statusListener];
    }
    set statusListener(value) {
      this[statusListener] = value;
    }
    static new() {
      return speech_to_text.SpeechToText._instance;
    }
    get hasRecognized() {
      return this[_recognized];
    }
    get lastRecognizedWords() {
      return this[_lastRecognized];
    }
    get lastStatus() {
      return this[_lastStatus];
    }
    get lastSoundLevel() {
      return this[_lastSoundLevel];
    }
    get isAvailable() {
      return this[_initWorked];
    }
    get isListening() {
      return this[_listening];
    }
    get isNotListening() {
      return !dart.test(this.isListening);
    }
    get lastError() {
      return this[_lastError];
    }
    get hasError() {
      return this.lastError != null;
    }
    get hasPermission() {
      return async.async(core.bool, function* hasPermission() {
        let hasPermission = (yield speech_to_text_platform_interface.SpeechToTextPlatform.instance.hasPermission());
        return hasPermission;
      });
    }
    initialize(opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onStatus = opts && 'onStatus' in opts ? opts.onStatus : null;
      let debugLogging = opts && 'debugLogging' in opts ? opts.debugLogging : false;
      let finalTimeout = opts && 'finalTimeout' in opts ? opts.finalTimeout : C[5] || CT.C5;
      if (finalTimeout == null) dart.nullFailed(I[0], 205, 16, "finalTimeout");
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(core.bool, (function* initialize() {
        if (dart.test(this[_initWorked])) {
          return T.FutureOfbool().value(this[_initWorked]);
        }
        this[_finalTimeout] = finalTimeout;
        if (dart.test(finalTimeout['<='](speech_to_text.SpeechToText._minFinalTimeout))) {
        }
        this.errorListener = onError;
        this.statusListener = onStatus;
        speech_to_text_platform_interface.SpeechToTextPlatform.instance.onTextRecognition = dart.bind(this, _onTextRecognition);
        speech_to_text_platform_interface.SpeechToTextPlatform.instance.onError = dart.bind(this, _onNotifyError);
        speech_to_text_platform_interface.SpeechToTextPlatform.instance.onStatus = dart.bind(this, _onNotifyStatus);
        speech_to_text_platform_interface.SpeechToTextPlatform.instance.onSoundLevel = dart.bind(this, _onSoundLevelChange);
        this[_initWorked] = (yield speech_to_text_platform_interface.SpeechToTextPlatform.instance.initialize({debugLogging: debugLogging, options: options}));
        return this[_initWorked];
      }).bind(this));
    }
    stop() {
      return async.async(dart.void, (function* stop() {
        this[_userEnded] = true;
        return this[_stop]();
      }).bind(this));
    }
    [_stop]() {
      return async.async(dart.void, (function* _stop() {
        if (!dart.test(this[_initWorked])) {
          return;
        }
        this[_shutdownListener]();
        yield speech_to_text_platform_interface.SpeechToTextPlatform.instance.stop();
        if (dart.test(this[_finalTimeout]['>'](speech_to_text.SpeechToText._minFinalTimeout))) {
          this[_notifyFinalTimer] = async.Timer.new(this[_finalTimeout], dart.bind(this, _onFinalTimeout));
        }
      }).bind(this));
    }
    cancel() {
      return async.async(dart.void, (function* cancel() {
        this[_userEnded] = true;
        return this[_cancel]();
      }).bind(this));
    }
    [_cancel]() {
      return async.async(dart.void, (function* _cancel() {
        if (!dart.test(this[_initWorked])) {
          return;
        }
        this[_shutdownListener]();
        yield speech_to_text_platform_interface.SpeechToTextPlatform.instance.cancel();
      }).bind(this));
    }
    listen(opts) {
      let onResult = opts && 'onResult' in opts ? opts.onResult : null;
      let listenFor = opts && 'listenFor' in opts ? opts.listenFor : null;
      let pauseFor = opts && 'pauseFor' in opts ? opts.pauseFor : null;
      let localeId = opts && 'localeId' in opts ? opts.localeId : null;
      let onSoundLevelChange = opts && 'onSoundLevelChange' in opts ? opts.onSoundLevelChange : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : false;
      let partialResults = opts && 'partialResults' in opts ? opts.partialResults : true;
      let onDevice = opts && 'onDevice' in opts ? opts.onDevice : false;
      let listenMode = opts && 'listenMode' in opts ? opts.listenMode : C[3] || CT.C3;
      if (listenMode == null) dart.nullFailed(I[0], 329, 18, "listenMode");
      let sampleRate = opts && 'sampleRate' in opts ? opts.sampleRate : 0;
      return async.async(dart.dynamic, (function* listen() {
        let t0;
        if (!dart.test(this[_initWorked])) {
          dart.throw(new speech_to_text.SpeechToTextNotInitializedException.new());
        }
        this[_userEnded] = false;
        this[_lastSpeechResult] = null;
        this[_cancelOnError] = core.bool.as(cancelOnError);
        this[_recognized] = false;
        this[_notifiedFinal] = false;
        this[_resultListener] = onResult;
        this[_soundLevelChange] = onSoundLevelChange;
        this[_partialResults] = core.bool.as(partialResults);
        t0 = this[_notifyFinalTimer];
        t0 == null ? null : t0.cancel();
        this[_notifyFinalTimer] = null;
        try {
          let started = (yield speech_to_text_platform_interface.SpeechToTextPlatform.instance.listen({partialResults: dart.dtest(partialResults) || pauseFor != null, onDevice: onDevice, listenMode: listenMode.index, sampleRate: sampleRate, localeId: localeId}));
          if (dart.test(started)) {
            this[_listenStartedAt] = $default.clock.now().millisecondsSinceEpoch;
            this[_lastSpeechEventAt] = this[_listenStartedAt];
            this[_setupListenAndPause](pauseFor, listenFor);
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            dart.throw(new speech_to_text.ListenFailedException.new(core.String.as(e.details)));
          } else
            throw e$;
        }
      }).bind(this));
    }
    [_setupListenAndPause](initialPauseFor, initialListenFor) {
      this[_pauseFor] = null;
      this[_listenFor] = null;
      if (initialPauseFor == null && initialListenFor == null) {
        return;
      }
      let pauseFor = initialPauseFor;
      let listenFor = initialListenFor;
      if (pauseFor != null) {
        let remainingMillis = dart.notNull(pauseFor.inMilliseconds) - dart.notNull(this[_elapsedSinceSpeechEvent]);
        pauseFor = new core.Duration.new({milliseconds: math.max(core.int, remainingMillis, 0)});
      }
      if (listenFor != null) {
        let remainingMillis = dart.notNull(listenFor.inMilliseconds) - dart.notNull(this[_elapsedListenMillis]);
        listenFor = new core.Duration.new({milliseconds: math.max(core.int, remainingMillis, 0)});
      }
      let minDuration = null;
      if (pauseFor == null) {
        this[_listenFor] = new core.Duration.new({milliseconds: dart.nullCheck(listenFor).inMilliseconds});
        minDuration = listenFor;
      } else if (listenFor == null) {
        this[_pauseFor] = new core.Duration.new({milliseconds: pauseFor.inMilliseconds});
        minDuration = pauseFor;
      } else {
        this[_listenFor] = new core.Duration.new({milliseconds: listenFor.inMilliseconds});
        this[_pauseFor] = new core.Duration.new({milliseconds: pauseFor.inMilliseconds});
        let minMillis = math.min(core.int, dart.notNull(listenFor.inMilliseconds) - dart.notNull(this[_elapsedListenMillis]), pauseFor.inMilliseconds);
        minDuration = new core.Duration.new({milliseconds: minMillis});
      }
      this[_listenTimer] = async.Timer.new(minDuration, dart.bind(this, _stopOnPauseOrListen));
    }
    get [_elapsedListenMillis]() {
      return dart.notNull($default.clock.now().millisecondsSinceEpoch) - dart.notNull(this[_listenStartedAt]);
    }
    get [_elapsedSinceSpeechEvent]() {
      return dart.notNull($default.clock.now().millisecondsSinceEpoch) - dart.notNull(this[_lastSpeechEventAt]);
    }
    [_stopOnPauseOrListen]() {
      let listenFor = this[_listenFor];
      let pauseFor = this[_pauseFor];
      if (listenFor != null && dart.notNull(this[_elapsedListenMillis]) >= dart.notNull(listenFor.inMilliseconds)) {
        this[_stop]();
      } else if (pauseFor != null && dart.notNull(this[_elapsedSinceSpeechEvent]) >= dart.notNull(pauseFor.inMilliseconds)) {
        this[_stop]();
      } else {
        this[_setupListenAndPause](this[_pauseFor], this[_listenFor]);
      }
    }
    locales() {
      return async.async(T.ListOfLocaleName(), (function* locales() {
        if (!dart.test(this[_initWorked])) {
          dart.throw(new speech_to_text.SpeechToTextNotInitializedException.new());
        }
        let locales = (yield speech_to_text_platform_interface.SpeechToTextPlatform.instance.locales());
        let filteredLocales = locales[$map](T.LocaleNameN(), dart.fn(locale => {
          let components = dart.dsend(locale, 'split', [":"]);
          if (!dart.equals(dart.dload(components, 'length'), 2)) {
            return null;
          }
          return new speech_to_text.LocaleName.new(core.String.as(dart.dsend(components, '_get', [0])), core.String.as(dart.dsend(components, '_get', [1])));
        }, T.dynamicToLocaleNameN()))[$where](dart.fn(item => item != null, T.LocaleNameNTobool()))[$toList]()[$cast](speech_to_text.LocaleName);
        if (dart.test(filteredLocales[$isNotEmpty])) {
          this[_systemLocale] = filteredLocales[$first];
        } else {
          this[_systemLocale] = null;
        }
        filteredLocales[$sort](dart.fn((ln1, ln2) => {
          if (ln1 == null) dart.nullFailed(I[0], 446, 27, "ln1");
          if (ln2 == null) dart.nullFailed(I[0], 446, 32, "ln2");
          return ln1.name[$compareTo](ln2.name);
        }, T.LocaleNameAndLocaleNameToint()));
        return filteredLocales;
      }).bind(this));
    }
    systemLocale() {
      return async.async(T.LocaleNameN(), (function* systemLocale() {
        if (this[_systemLocale] == null) {
          yield this.locales();
        }
        return T.FutureOfLocaleNameN().value(this[_systemLocale]);
      }).bind(this));
    }
    [_onTextRecognition](resultJson) {
      if (resultJson == null) dart.nullFailed(I[0], 459, 34, "resultJson");
      let resultMap = T.MapOfString$dynamic().as(convert.jsonDecode(resultJson));
      let speechResult = speech_recognition_result.SpeechRecognitionResult.fromJson(resultMap);
      this[_notifyResults](speechResult);
    }
    [_onFinalTimeout]() {
      if (dart.test(this[_notifiedFinal])) return;
      if (this[_lastSpeechResult] != null && this[_resultListener] != null) {
        let finalResult = dart.nullCheck(this[_lastSpeechResult]).toFinal();
        this[_notifyResults](finalResult);
      }
    }
    [_notifyResults](speechResult) {
      let t1;
      if (speechResult == null) dart.nullFailed(I[0], 475, 47, "speechResult");
      if (dart.test(this[_notifiedFinal])) return;
      if (this[_lastSpeechResult] == null || !dart.equals(this[_lastSpeechResult], speechResult)) {
        this[_lastSpeechEventAt] = $default.clock.now().millisecondsSinceEpoch;
      }
      this[_lastSpeechResult] = speechResult;
      if (!dart.test(this[_partialResults]) && !dart.test(speechResult.finalResult)) {
        return;
      }
      this[_recognized] = true;
      this[_lastRecognized] = speechResult.recognizedWords;
      if (dart.test(speechResult.finalResult)) {
        t1 = this[_notifyFinalTimer];
        t1 == null ? null : t1.cancel();
        this[_notifyFinalTimer] = null;
        this[_notifiedFinal] = true;
      }
      if (this[_resultListener] != null) {
        dart.nullCheck(this[_resultListener])(speechResult);
      }
    }
    [_onNotifyError](errorJson) {
      if (errorJson == null) dart.nullFailed(I[0], 499, 38, "errorJson");
      return async.async(dart.void, (function* _onNotifyError() {
        if (dart.test(this.isNotListening) && dart.test(this[_userEnded])) {
          return;
        }
        let errorMap = T.MapOfString$dynamic().as(convert.jsonDecode(errorJson));
        let speechError = speech_recognition_error.SpeechRecognitionError.fromJson(errorMap);
        this[_lastError] = speechError;
        if (this.errorListener != null) {
          dart.nullCheck(this.errorListener)(speechError);
        }
        if (dart.test(this[_cancelOnError]) && dart.test(speechError.permanent)) {
          yield this[_cancel]();
        }
      }).bind(this));
    }
    [_onNotifyStatus](status) {
      if (status == null) dart.nullFailed(I[0], 514, 31, "status");
      this[_lastStatus] = status;
      this[_listening] = status === "listening";
      if (this.statusListener != null) {
        dart.nullCheck(this.statusListener)(status);
      }
    }
    [_onSoundLevelChange](level) {
      if (level == null) dart.nullFailed(I[0], 524, 35, "level");
      if (dart.test(this.isNotListening)) {
        return;
      }
      this[_lastSoundLevel] = level;
      if (this[_soundLevelChange] != null) {
        dart.nullCheck(this[_soundLevelChange])(level);
      }
    }
    [_shutdownListener]() {
      let t1, t1$;
      this[_listening] = false;
      this[_recognized] = false;
      t1 = this[_listenTimer];
      t1 == null ? null : t1.cancel();
      this[_listenTimer] = null;
      t1$ = this[_notifyFinalTimer];
      t1$ == null ? null : t1$.cancel();
      this[_notifyFinalTimer] = null;
      this[_listenTimer] = null;
    }
  };
  (speech_to_text.SpeechToText.withMethodChannel = function() {
    this[_initWorked] = false;
    this[_recognized] = false;
    this[_listening] = false;
    this[_cancelOnError] = false;
    this[_partialResults] = false;
    this[_notifiedFinal] = false;
    this[_listenStartedAt] = 0;
    this[_lastSpeechEventAt] = 0;
    this[_pauseFor] = null;
    this[_listenFor] = null;
    this[_finalTimeout] = speech_to_text.SpeechToText._defaultFinalTimeout;
    this[_userEnded] = false;
    this[_lastRecognized] = "";
    this[_lastStatus] = "";
    this[_lastSoundLevel] = 0.0;
    this[_listenTimer] = null;
    this[_notifyFinalTimer] = null;
    this[_systemLocale] = null;
    this[_lastError] = null;
    this[_lastSpeechResult] = null;
    this[_resultListener] = null;
    this[errorListener] = null;
    this[statusListener] = null;
    this[_soundLevelChange] = null;
    ;
  }).prototype = speech_to_text.SpeechToText.prototype;
  dart.addTypeTests(speech_to_text.SpeechToText);
  dart.addTypeCaches(speech_to_text.SpeechToText);
  dart.setMethodSignature(speech_to_text.SpeechToText, () => ({
    __proto__: dart.getMethods(speech_to_text.SpeechToText.__proto__),
    initialize: dart.fnType(async.Future$(core.bool), [], {debugLogging: dart.dynamic, finalTimeout: core.Duration, onError: dart.nullable(dart.fnType(dart.void, [speech_recognition_error.SpeechRecognitionError])), onStatus: dart.nullable(dart.fnType(dart.void, [core.String])), options: dart.nullable(core.List$(speech_to_text_platform_interface.SpeechConfigOption))}, {}),
    stop: dart.fnType(async.Future$(dart.void), []),
    [_stop]: dart.fnType(async.Future$(dart.void), []),
    cancel: dart.fnType(async.Future$(dart.void), []),
    [_cancel]: dart.fnType(async.Future$(dart.void), []),
    listen: dart.fnType(async.Future, [], {cancelOnError: dart.dynamic, listenFor: dart.nullable(core.Duration), listenMode: speech_to_text.ListenMode, localeId: dart.nullable(core.String), onDevice: dart.dynamic, onResult: dart.nullable(dart.fnType(dart.void, [speech_recognition_result.SpeechRecognitionResult])), onSoundLevelChange: dart.nullable(dart.fnType(dart.dynamic, [core.double])), partialResults: dart.dynamic, pauseFor: dart.nullable(core.Duration), sampleRate: dart.dynamic}, {}),
    [_setupListenAndPause]: dart.fnType(dart.void, [dart.nullable(core.Duration), dart.nullable(core.Duration)]),
    [_stopOnPauseOrListen]: dart.fnType(dart.void, []),
    locales: dart.fnType(async.Future$(core.List$(speech_to_text.LocaleName)), []),
    systemLocale: dart.fnType(async.Future$(dart.nullable(speech_to_text.LocaleName)), []),
    [_onTextRecognition]: dart.fnType(dart.void, [core.String]),
    [_onFinalTimeout]: dart.fnType(dart.void, []),
    [_notifyResults]: dart.fnType(dart.void, [speech_recognition_result.SpeechRecognitionResult]),
    [_onNotifyError]: dart.fnType(async.Future$(dart.void), [core.String]),
    [_onNotifyStatus]: dart.fnType(dart.void, [core.String]),
    [_onSoundLevelChange]: dart.fnType(dart.void, [core.double]),
    [_shutdownListener]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(speech_to_text.SpeechToText, () => ({
    __proto__: dart.getGetters(speech_to_text.SpeechToText.__proto__),
    hasRecognized: core.bool,
    lastRecognizedWords: core.String,
    lastStatus: core.String,
    lastSoundLevel: core.double,
    isAvailable: core.bool,
    isListening: core.bool,
    isNotListening: core.bool,
    lastError: dart.nullable(speech_recognition_error.SpeechRecognitionError),
    hasError: core.bool,
    hasPermission: async.Future$(core.bool),
    [_elapsedListenMillis]: core.int,
    [_elapsedSinceSpeechEvent]: core.int
  }));
  dart.setLibraryUri(speech_to_text.SpeechToText, I[1]);
  dart.setFieldSignature(speech_to_text.SpeechToText, () => ({
    __proto__: dart.getFields(speech_to_text.SpeechToText.__proto__),
    [_initWorked]: dart.fieldType(core.bool),
    [_recognized]: dart.fieldType(core.bool),
    [_listening]: dart.fieldType(core.bool),
    [_cancelOnError]: dart.fieldType(core.bool),
    [_partialResults]: dart.fieldType(core.bool),
    [_notifiedFinal]: dart.fieldType(core.bool),
    [_listenStartedAt]: dart.fieldType(core.int),
    [_lastSpeechEventAt]: dart.fieldType(core.int),
    [_pauseFor]: dart.fieldType(dart.nullable(core.Duration)),
    [_listenFor]: dart.fieldType(dart.nullable(core.Duration)),
    [_finalTimeout]: dart.fieldType(core.Duration),
    [_userEnded]: dart.fieldType(core.bool),
    [_lastRecognized]: dart.fieldType(core.String),
    [_lastStatus]: dart.fieldType(core.String),
    [_lastSoundLevel]: dart.fieldType(core.double),
    [_listenTimer]: dart.fieldType(dart.nullable(async.Timer)),
    [_notifyFinalTimer]: dart.fieldType(dart.nullable(async.Timer)),
    [_systemLocale]: dart.fieldType(dart.nullable(speech_to_text.LocaleName)),
    [_lastError]: dart.fieldType(dart.nullable(speech_recognition_error.SpeechRecognitionError)),
    [_lastSpeechResult]: dart.fieldType(dart.nullable(speech_recognition_result.SpeechRecognitionResult)),
    [_resultListener]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [speech_recognition_result.SpeechRecognitionResult]))),
    errorListener: dart.fieldType(dart.nullable(dart.fnType(dart.void, [speech_recognition_error.SpeechRecognitionError]))),
    statusListener: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.String]))),
    [_soundLevelChange]: dart.fieldType(dart.nullable(dart.fnType(dart.dynamic, [core.double])))
  }));
  dart.defineLazy(speech_to_text.SpeechToText, {
    /*speech_to_text.SpeechToText.listenMethod*/get listenMethod() {
      return "listen";
    },
    /*speech_to_text.SpeechToText.textRecognitionMethod*/get textRecognitionMethod() {
      return "textRecognition";
    },
    /*speech_to_text.SpeechToText.notifyErrorMethod*/get notifyErrorMethod() {
      return "notifyError";
    },
    /*speech_to_text.SpeechToText.notifyStatusMethod*/get notifyStatusMethod() {
      return "notifyStatus";
    },
    /*speech_to_text.SpeechToText.soundLevelChangeMethod*/get soundLevelChangeMethod() {
      return "soundLevelChange";
    },
    /*speech_to_text.SpeechToText.notListeningStatus*/get notListeningStatus() {
      return "notListening";
    },
    /*speech_to_text.SpeechToText.listeningStatus*/get listeningStatus() {
      return "listening";
    },
    /*speech_to_text.SpeechToText._defaultFinalTimeout*/get _defaultFinalTimeout() {
      return C[5] || CT.C5;
    },
    /*speech_to_text.SpeechToText._minFinalTimeout*/get _minFinalTimeout() {
      return C[6] || CT.C6;
    },
    /*speech_to_text.SpeechToText.androidAlwaysUseStop*/get androidAlwaysUseStop() {
      return new speech_to_text_platform_interface.SpeechConfigOption.new("android", "alwaysUseStop", true);
    },
    /*speech_to_text.SpeechToText.androidIntentLookup*/get androidIntentLookup() {
      return new speech_to_text_platform_interface.SpeechConfigOption.new("android", "intentLookup", true);
    },
    /*speech_to_text.SpeechToText._instance*/get _instance() {
      return new speech_to_text.SpeechToText.withMethodChannel();
    }
  }, false);
  speech_to_text.SpeechToTextNotInitializedException = class SpeechToTextNotInitializedException extends core.Object {};
  (speech_to_text.SpeechToTextNotInitializedException.new = function() {
    ;
  }).prototype = speech_to_text.SpeechToTextNotInitializedException.prototype;
  dart.addTypeTests(speech_to_text.SpeechToTextNotInitializedException);
  dart.addTypeCaches(speech_to_text.SpeechToTextNotInitializedException);
  speech_to_text.SpeechToTextNotInitializedException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(speech_to_text.SpeechToTextNotInitializedException, I[1]);
  var details$ = dart.privateName(speech_to_text, "ListenFailedException.details");
  speech_to_text.ListenFailedException = class ListenFailedException extends core.Object {
    get details() {
      return this[details$];
    }
    set details(value) {
      super.details = value;
    }
  };
  (speech_to_text.ListenFailedException.new = function(details) {
    if (details == null) dart.nullFailed(I[0], 553, 30, "details");
    this[details$] = details;
    ;
  }).prototype = speech_to_text.ListenFailedException.prototype;
  dart.addTypeTests(speech_to_text.ListenFailedException);
  dart.addTypeCaches(speech_to_text.ListenFailedException);
  speech_to_text.ListenFailedException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(speech_to_text.ListenFailedException, I[1]);
  dart.setFieldSignature(speech_to_text.ListenFailedException, () => ({
    __proto__: dart.getFields(speech_to_text.ListenFailedException.__proto__),
    details: dart.finalFieldType(core.String)
  }));
  dart.trackLibraries("packages/speech_to_text/speech_to_text.dart", {
    "package:speech_to_text/speech_to_text.dart": speech_to_text
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["speech_to_text.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/speech_to_text/speech_to_text.dart.lib.js"}');
  // Exports:
  return {
    speech_to_text: speech_to_text
  };
}));

//# sourceMappingURL=speech_to_text.dart.lib.js.map
