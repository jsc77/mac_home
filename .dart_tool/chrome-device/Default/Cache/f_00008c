define(['dart_sdk', 'packages/plugin_platform_interface/plugin_platform_interface.dart', 'packages/flutter/src/services/system_channels.dart'], (function load__packages__speech_to_text_platform_interface__method_channel_speech_to_text_dart(dart_sdk, packages__plugin_platform_interface__plugin_platform_interface$46dart, packages__flutter__src__services__system_channels$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const plugin_platform_interface = packages__plugin_platform_interface__plugin_platform_interface$46dart.plugin_platform_interface;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  var method_channel_speech_to_text = Object.create(dart.library);
  var speech_to_text_platform_interface = Object.create(dart.library);
  var $_set = dartx._set;
  var $forEach = dartx.forEach;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    SpeechConfigOptionTovoid: () => (T.SpeechConfigOptionTovoid = dart.constFn(dart.fnType(dart.void, [speech_to_text_platform_interface.SpeechConfigOption])))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[2] || CT.C2
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[1] || CT.C1,
        [MethodChannel_name]: "plugin.csdcorp.com/speech_to_text"
      });
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/speech_to_text_platform_interface-2.0.1/lib/method_channel_speech_to_text.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/speech_to_text_platform_interface-2.0.1/lib/speech_to_text_platform_interface.dart",
    "package:speech_to_text_platform_interface/speech_to_text_platform_interface.dart",
    "package:speech_to_text_platform_interface/method_channel_speech_to_text.dart"
  ];
  var _handleCallbacks = dart.privateName(method_channel_speech_to_text, "_handleCallbacks");
  var onTextRecognition = dart.privateName(speech_to_text_platform_interface, "SpeechToTextPlatform.onTextRecognition");
  var onError = dart.privateName(speech_to_text_platform_interface, "SpeechToTextPlatform.onError");
  var onStatus = dart.privateName(speech_to_text_platform_interface, "SpeechToTextPlatform.onStatus");
  var onSoundLevel = dart.privateName(speech_to_text_platform_interface, "SpeechToTextPlatform.onSoundLevel");
  speech_to_text_platform_interface.SpeechToTextPlatform = class SpeechToTextPlatform extends plugin_platform_interface.PlatformInterface {
    get onTextRecognition() {
      return this[onTextRecognition];
    }
    set onTextRecognition(value) {
      this[onTextRecognition] = value;
    }
    get onError() {
      return this[onError];
    }
    set onError(value) {
      this[onError] = value;
    }
    get onStatus() {
      return this[onStatus];
    }
    set onStatus(value) {
      this[onStatus] = value;
    }
    get onSoundLevel() {
      return this[onSoundLevel];
    }
    set onSoundLevel(value) {
      this[onSoundLevel] = value;
    }
    static get instance() {
      return speech_to_text_platform_interface.SpeechToTextPlatform._instance;
    }
    static set instance(instance) {
      if (instance == null) dart.nullFailed(I[1], 49, 44, "instance");
      plugin_platform_interface.PlatformInterface.verifyToken(instance, speech_to_text_platform_interface.SpeechToTextPlatform._token);
      speech_to_text_platform_interface.SpeechToTextPlatform._instance = instance;
    }
    hasPermission() {
      dart.throw(new core.UnimplementedError.new("hasPermission() has not been implemented."));
    }
    initialize(opts) {
      let debugLogging = opts && 'debugLogging' in opts ? opts.debugLogging : false;
      let options = opts && 'options' in opts ? opts.options : null;
      dart.throw(new core.UnimplementedError.new("initialize() has not been implemented."));
    }
    stop() {
      dart.throw(new core.UnimplementedError.new("stop() has not been implemented."));
    }
    cancel() {
      dart.throw(new core.UnimplementedError.new("cancel() has not been implemented."));
    }
    listen(opts) {
      let localeId = opts && 'localeId' in opts ? opts.localeId : null;
      let partialResults = opts && 'partialResults' in opts ? opts.partialResults : true;
      let onDevice = opts && 'onDevice' in opts ? opts.onDevice : false;
      let listenMode = opts && 'listenMode' in opts ? opts.listenMode : 0;
      if (listenMode == null) dart.nullFailed(I[1], 145, 11, "listenMode");
      let sampleRate = opts && 'sampleRate' in opts ? opts.sampleRate : 0;
      dart.throw(new core.UnimplementedError.new("listen() has not been implemented."));
    }
    locales() {
      dart.throw(new core.UnimplementedError.new("locales() has not been implemented."));
    }
  };
  (speech_to_text_platform_interface.SpeechToTextPlatform.new = function() {
    this[onTextRecognition] = null;
    this[onError] = null;
    this[onStatus] = null;
    this[onSoundLevel] = null;
    speech_to_text_platform_interface.SpeechToTextPlatform.__proto__.new.call(this, {token: speech_to_text_platform_interface.SpeechToTextPlatform._token});
    ;
  }).prototype = speech_to_text_platform_interface.SpeechToTextPlatform.prototype;
  dart.addTypeTests(speech_to_text_platform_interface.SpeechToTextPlatform);
  dart.addTypeCaches(speech_to_text_platform_interface.SpeechToTextPlatform);
  dart.setMethodSignature(speech_to_text_platform_interface.SpeechToTextPlatform, () => ({
    __proto__: dart.getMethods(speech_to_text_platform_interface.SpeechToTextPlatform.__proto__),
    hasPermission: dart.fnType(async.Future$(core.bool), []),
    initialize: dart.fnType(async.Future$(core.bool), [], {debugLogging: dart.dynamic, options: dart.nullable(core.List$(speech_to_text_platform_interface.SpeechConfigOption))}, {}),
    stop: dart.fnType(async.Future$(dart.void), []),
    cancel: dart.fnType(async.Future$(dart.void), []),
    listen: dart.fnType(async.Future$(core.bool), [], {listenMode: core.int, localeId: dart.nullable(core.String), onDevice: dart.dynamic, partialResults: dart.dynamic, sampleRate: dart.dynamic}, {}),
    locales: dart.fnType(async.Future$(core.List), [])
  }));
  dart.setLibraryUri(speech_to_text_platform_interface.SpeechToTextPlatform, I[2]);
  dart.setFieldSignature(speech_to_text_platform_interface.SpeechToTextPlatform, () => ({
    __proto__: dart.getFields(speech_to_text_platform_interface.SpeechToTextPlatform.__proto__),
    onTextRecognition: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.String]))),
    onError: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.String]))),
    onStatus: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.String]))),
    onSoundLevel: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.double])))
  }));
  dart.defineLazy(speech_to_text_platform_interface.SpeechToTextPlatform, {
    /*speech_to_text_platform_interface.SpeechToTextPlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*speech_to_text_platform_interface.SpeechToTextPlatform._instance*/get _instance() {
      return new method_channel_speech_to_text.MethodChannelSpeechToText.new();
    },
    set _instance(_) {}
  }, false);
  method_channel_speech_to_text.MethodChannelSpeechToText = class MethodChannelSpeechToText extends speech_to_text_platform_interface.SpeechToTextPlatform {
    hasPermission() {
      return async.async(core.bool, function* hasPermission() {
        let t0;
        t0 = (yield method_channel_speech_to_text._channel.invokeMethod(core.bool, "has_permission"));
        return t0 == null ? false : t0;
      });
    }
    initialize(opts) {
      let debugLogging = opts && 'debugLogging' in opts ? opts.debugLogging : false;
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(core.bool, (function* initialize() {
        let t0, t0$;
        method_channel_speech_to_text._channel.setMethodCallHandler(dart.bind(this, _handleCallbacks));
        let params = new (T.IdentityMapOfString$Object()).from(["debugLogging", core.Object.as(debugLogging)]);
        t0 = options;
        t0 == null ? null : t0[$forEach](dart.fn(option => {
          let t3, t2, t1;
          if (option == null) dart.nullFailed(I[0], 38, 23, "option");
          t1 = params;
          t2 = option.name;
          t3 = core.Object.as(option.value);
          t1[$_set](t2, t3);
          return t3;
        }, T.SpeechConfigOptionTovoid()));
        t0$ = (yield method_channel_speech_to_text._channel.invokeMethod(core.bool, "initialize", params));
        return t0$ == null ? false : t0$;
      }).bind(this));
    }
    stop() {
      return method_channel_speech_to_text._channel.invokeMethod(dart.void, "stop");
    }
    cancel() {
      return method_channel_speech_to_text._channel.invokeMethod(dart.void, "cancel");
    }
    listen(opts) {
      let localeId = opts && 'localeId' in opts ? opts.localeId : null;
      let partialResults = opts && 'partialResults' in opts ? opts.partialResults : true;
      let onDevice = opts && 'onDevice' in opts ? opts.onDevice : false;
      let listenMode = opts && 'listenMode' in opts ? opts.listenMode : 0;
      if (listenMode == null) dart.nullFailed(I[0], 104, 11, "listenMode");
      let sampleRate = opts && 'sampleRate' in opts ? opts.sampleRate : 0;
      return async.async(core.bool, function* listen() {
        let t0;
        let listenParams = new (T.IdentityMapOfString$dynamic()).from(["partialResults", partialResults, "onDevice", onDevice, "listenMode", listenMode, "sampleRate", sampleRate]);
        if (localeId != null) {
          listenParams[$_set]("localeId", localeId);
        }
        t0 = (yield method_channel_speech_to_text._channel.invokeMethod(core.bool, "listen", listenParams));
        return t0 == null ? false : t0;
      });
    }
    locales() {
      return async.async(core.List, function* locales() {
        let t0;
        t0 = (yield method_channel_speech_to_text._channel.invokeMethod(core.List, "locales"));
        return t0 == null ? [] : t0;
      });
    }
    [_handleCallbacks](call) {
      if (call == null) dart.nullFailed(I[0], 125, 38, "call");
      return async.async(dart.dynamic, (function* _handleCallbacks() {
        switch (call.method) {
          case "textRecognition":
          {
            if (typeof call.arguments == 'string' && this.onTextRecognition != null) {
              dart.nullCheck(this.onTextRecognition)(core.String.as(call.arguments));
            }
            break;
          }
          case "notifyError":
          {
            if (typeof call.arguments == 'string' && this.onError != null) {
              dart.nullCheck(this.onError)(core.String.as(call.arguments));
            }
            break;
          }
          case "notifyStatus":
          {
            if (typeof call.arguments == 'string' && this.onStatus != null) {
              dart.nullCheck(this.onStatus)(core.String.as(call.arguments));
            }
            break;
          }
          case "soundLevelChange":
          {
            if (typeof call.arguments == 'number' && this.onSoundLevel != null) {
              dart.nullCheck(this.onSoundLevel)(core.double.as(call.arguments));
            }
            break;
          }
          default:
        }
      }).bind(this));
    }
    processMethodCall(call) {
      if (call == null) dart.nullFailed(I[0], 153, 39, "call");
      return async.async(dart.dynamic, (function* processMethodCall() {
        return yield this[_handleCallbacks](call);
      }).bind(this));
    }
    get channel() {
      return method_channel_speech_to_text._channel;
    }
  };
  (method_channel_speech_to_text.MethodChannelSpeechToText.new = function() {
    method_channel_speech_to_text.MethodChannelSpeechToText.__proto__.new.call(this);
    ;
  }).prototype = method_channel_speech_to_text.MethodChannelSpeechToText.prototype;
  dart.addTypeTests(method_channel_speech_to_text.MethodChannelSpeechToText);
  dart.addTypeCaches(method_channel_speech_to_text.MethodChannelSpeechToText);
  dart.setMethodSignature(method_channel_speech_to_text.MethodChannelSpeechToText, () => ({
    __proto__: dart.getMethods(method_channel_speech_to_text.MethodChannelSpeechToText.__proto__),
    [_handleCallbacks]: dart.fnType(async.Future, [message_codec.MethodCall]),
    processMethodCall: dart.fnType(async.Future, [message_codec.MethodCall])
  }));
  dart.setGetterSignature(method_channel_speech_to_text.MethodChannelSpeechToText, () => ({
    __proto__: dart.getGetters(method_channel_speech_to_text.MethodChannelSpeechToText.__proto__),
    channel: platform_channel.MethodChannel
  }));
  dart.setLibraryUri(method_channel_speech_to_text.MethodChannelSpeechToText, I[3]);
  dart.defineLazy(method_channel_speech_to_text.MethodChannelSpeechToText, {
    /*method_channel_speech_to_text.MethodChannelSpeechToText.textRecognitionMethod*/get textRecognitionMethod() {
      return "textRecognition";
    },
    /*method_channel_speech_to_text.MethodChannelSpeechToText.notifyErrorMethod*/get notifyErrorMethod() {
      return "notifyError";
    },
    /*method_channel_speech_to_text.MethodChannelSpeechToText.notifyStatusMethod*/get notifyStatusMethod() {
      return "notifyStatus";
    },
    /*method_channel_speech_to_text.MethodChannelSpeechToText.soundLevelChangeMethod*/get soundLevelChangeMethod() {
      return "soundLevelChange";
    }
  }, false);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(method_channel_speech_to_text, {
    /*method_channel_speech_to_text._channel*/get _channel() {
      return C[0] || CT.C0;
    }
  }, false);
  var platform$ = dart.privateName(speech_to_text_platform_interface, "SpeechConfigOption.platform");
  var name$ = dart.privateName(speech_to_text_platform_interface, "SpeechConfigOption.name");
  var value$ = dart.privateName(speech_to_text_platform_interface, "SpeechConfigOption.value");
  speech_to_text_platform_interface.SpeechConfigOption = class SpeechConfigOption extends core.Object {
    get platform() {
      return this[platform$];
    }
    set platform(value) {
      super.platform = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
  };
  (speech_to_text_platform_interface.SpeechConfigOption.new = function(platform, name, value) {
    if (platform == null) dart.nullFailed(I[1], 24, 27, "platform");
    if (name == null) dart.nullFailed(I[1], 24, 42, "name");
    this[platform$] = platform;
    this[name$] = name;
    this[value$] = value;
    ;
  }).prototype = speech_to_text_platform_interface.SpeechConfigOption.prototype;
  dart.addTypeTests(speech_to_text_platform_interface.SpeechConfigOption);
  dart.addTypeCaches(speech_to_text_platform_interface.SpeechConfigOption);
  dart.setLibraryUri(speech_to_text_platform_interface.SpeechConfigOption, I[2]);
  dart.setFieldSignature(speech_to_text_platform_interface.SpeechConfigOption, () => ({
    __proto__: dart.getFields(speech_to_text_platform_interface.SpeechConfigOption.__proto__),
    platform: dart.finalFieldType(core.String),
    name: dart.finalFieldType(core.String),
    value: dart.finalFieldType(dart.dynamic)
  }));
  dart.trackLibraries("packages/speech_to_text_platform_interface/method_channel_speech_to_text.dart", {
    "package:speech_to_text_platform_interface/method_channel_speech_to_text.dart": method_channel_speech_to_text,
    "package:speech_to_text_platform_interface/speech_to_text_platform_interface.dart": speech_to_text_platform_interface
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["speech_to_text_platform_interface.dart","method_channel_speech_to_text.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqDiC;;;;;;IACF;;;;;;IACC;;;;;;IACD;;;;;;;AAZe;IAAS;;UAIZ;AACQ,MAA7B,wDAAY,QAAQ,EAAE;AACpB,MAApB,mEAAY,QAAQ;IACtB;;AAgBuE,MAArE,WAAM,gCAAmB;IAC3B;;UAiBK;UAAgD;AACe,MAAlE,WAAM,gCAAmB;IAC3B;;AAa8D,MAA5D,WAAM,gCAAmB;IAC3B;;AAagE,MAA9D,WAAM,gCAAmB;IAC3B;;UA0Ba;UACT;UACA;UACI;;UACJ;AAC4D,MAA9D,WAAM,gCAAmB;IAC3B;;AAKiE,MAA/D,WAAM,gCAAmB;IAC3B;;;IApG+B;IACF;IACC;IACD;AArBJ,4FAAa;;EAAO;;;;;;;;;;;;;;;;;;;;;MAEzB,6DAAM;YAAG;;MAED,gEAAS;YAAG;;;;;;ACbd;;AACxB,cAAO,MAAM,AAAS,+DAAmB;cAAlC,cAAuD;MAChE;;;UAIK;UAAgD;AAD9B;;AAE0B,QAA/C,AAAS,sEAAqB;AAC1B,qBAAyB,2CAC3B,+BAAgB,YAAY;AAEkC,aAAhE,OAAO;qBAAP,OAAS,aAAQ,QAAC;;;AAAW,qBAAM;eAAC,AAAO,MAAD;8BAAS,AAAO,MAAD;UAAtB;;;AACnC,eAAO,MAAM,AAAS,+DAChB,cACA,MAAM;cAFL,eAIH;MACN;;;AAcE,YAAO,AAAS,gEAAa;IAC/B;;AAcE,YAAO,AAAS,gEAAa;IAC/B;;UA2Ba;UACT;UACA;UACI;;UACJ;AALe;;AAMI,2BAAe,4CAClC,kBAAkB,cAAc,EAChC,YAAY,QAAQ,EACpB,cAAc,UAAU,EACxB,cAAc,UAAU;AAE1B,YAAY,QAAQ;AACiB,UAAnC,AAAY,YAAA,QAAC,YAAc,QAAQ;;AAErC,cAAO,MAAM,AAAS,+DAAmB,UAAU,YAAY;cAAxD,cAA6D;MACtE;;;AAK6B;;AAC3B,cAAO,MAAM,AAAS,+DAA4B;cAA3C,cAAyD;MAClE;;;UAEmC;AAAZ;AAErB,gBAAQ,AAAK,IAAD;;;AAER,gBAAmB,OAAf,AAAK,IAAD,0BAAgC;AACJ,cAAjB,AAAC,eAAlB,uCAAmB,AAAK,IAAD;;AAEzB;;;;AAEA,gBAAmB,OAAf,AAAK,IAAD,0BAAgC;AACd,cAAjB,AAAC,eAAR,6BAAS,AAAK,IAAD;;AAEf;;;;AAEA,gBAAmB,OAAf,AAAK,IAAD,0BAAgC;AACb,cAAjB,AAAC,eAAT,8BAAU,AAAK,IAAD;;AAEhB;;;;AAEA,gBAAmB,OAAf,AAAK,IAAD,0BAAgC;AACT,cAAjB,AAAC,eAAb,kCAAc,AAAK,IAAD;;AAEpB;;;;MAGN;;;UAGoC;AAAZ;AACtB,cAAO,OAAM,uBAAiB,IAAI;MACpC;;;AAG6B;IAAQ;;;;;EACvC;;;;;;;;;;;;;;MAlJsB,6EAAqB;;;MACrB,yEAAiB;;;MACjB,0EAAkB;;;MAClB,8EAAsB;;;;;;;;;MARxB,sCAAQ;;;;;;;;IDQb;;;;;;IAGA;;;;;;IAGC;;;;;;;uEAEU,UAAe,MAAW;QAA1B;QAAe;IAAf;IAAe;IAAW;;EAAM","file":"../../../../../../../packages/speech_to_text_platform_interface/method_channel_speech_to_text.dart.lib.js"}');
  // Exports:
  return {
    method_channel_speech_to_text: method_channel_speech_to_text,
    speech_to_text_platform_interface: speech_to_text_platform_interface
  };
}));

//# sourceMappingURL=method_channel_speech_to_text.dart.lib.js.map
